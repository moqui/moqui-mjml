<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="load" noun="GrapeJs">
        <description>Create MJML</description>
        <in-parameters>
            <parameter name="resourceId"/>
            <parameter name="emailTemplateId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="resourceId"/>
            <parameter name="data"/>
        </out-parameters>
        <actions>
            <if condition="resourceId == 'null'"><set field="resourceId" from="null"/></if>
<!--            <log level="warn" message="resourceId is ${resourceId} resourceId.getClass().getName() ${resourceId.getClass().getName()} resourceId == 'null' ${resourceId == 'null'} resourceId == null ${resourceId == null}"/>-->
<!--            <log level="warn" message="load context.toString() ${context.toString()}"/>-->
            <if condition="emailTemplateId">
                <entity-find-one entity-name="moqui.basic.email.EmailTemplate" value-field="emailTemplate" auto-field-map="[emailTemplateId:emailTemplateId]"/>
                <if condition="!resourceId"><set field="resourceId" from="emailTemplate?.resourceId"/></if>
                <if condition="resourceId != emailTemplate?.resourceId">
                    <!-- This should almost never happen, but if it does it basically creates a resource leak for the previously used resource -->
                    <log message="Changing resource id from ${resourceId} to ${emailTemplate?.resourceId} for email template ${emailTemplateId}"/>
                    <service-call name="update#moqui.basic.email.EmailTemplate" in-map="[emailTemplateId:emailTemplateId,resourceId:resourceId]"/>
                </if>
            </if>

            <if condition="!resourceId">
                <then>
                    <set field="grapesJsResource" from="ec.resource.getLocationReference('dbresource://grapesjs/project')"/>
                    <service-call name="create#moqui.resource.DbResource" in-map="[parentResourceId:grapesJsResource.getDbResourceId(),isFile:'Y']" out-map="dbResource"/>
                    <service-call name="update#moqui.resource.DbResource" in-map="[resourceId:dbResource.resourceId,filename:dbResource.resourceId+'.json']" out-map="dbResource"/>
                    <set field="versionName" value="01"/>
                    <set field="defaultFile" from="ec.resource.getLocationReference('dbresource://grapesjs/template/default.json')"/>
                    <set field="data" from="defaultFile.getText()"/>
                    <service-call name="create#moqui.resource.DbResourceFile" in-map="[resourceId: dbResource.resourceId,mimeType: 'text/json',versionName: versionName,rootVersionName: versionName,fileData:data]"/>
                    <service-call name="create#moqui.resource.DbResourceFileHistory" in-map="[resourceId: dbResource.resourceId,versionDate: ec.user.nowTimestamp,userId: ec.user.userId,isDiff: 'N']"/>
                    <set field="resourceId" from="dbResource.resourceId"/>

                    <if condition="emailTemplateId">
                        <service-call name="update#moqui.basic.email.EmailTemplate" in-map="[emailTemplateId:emailTemplateId,resourceId:resourceId]"/>
                    </if>
<!--                    <set field="resourceId" from="null"/>-->
<!--                    <set field="data" from="null"/>-->
                </then>
                <else>
                    <entity-find-one entity-name="moqui.resource.DbResource" value-field="dbResource" auto-field-map="[resourceId:resourceId]"/>
                    <!--                    <log level="warn" message="dbResource ${dbResource}"/>-->
                    <if condition="!dbResource">
                        <return error="true" message="Resource not found"/>
                    </if>
                    <set field="actualDbResourcePath" from="null"/>
                    <set field="dbResourcePath" from="dbResource.filename"/>
                    <set field="lastDbResource" from="dbResource"/>
                    <!--                    <log level="warn" message="lastDbResource ${lastDbResource}"/>-->
                    <script>
                        while (actualDbResourcePath == null) {
//                            ec.logger.warn('dbResourcePath: '+dbResourcePath)
                            if (lastDbResource.parentResourceId == null) {
                                dbResourcePath = 'dbresource://'+dbResourcePath
                                actualDbResourcePath = dbResourcePath
//                                ec.logger.warn('actualDbResourcePath: '+actualDbResourcePath)
                            } else {
                                lastDbResource = ec.entity.fastFindOne("moqui.resource.DbResource", true, false, lastDbResource.parentResourceId)
                                dbResourcePath = lastDbResource.filename+'/'+dbResourcePath
                            }
                        }
                    </script>
                    <set field="putDbResource" from="ec.resource.getLocationReference(actualDbResourcePath)"/>
                    <entity-find entity-name="moqui.resource.DbResourceFileHistory" list="dbResourceHistoryList" limit="1">
                        <econdition field-name="resourceId" from="resourceId"/>
                        <order-by field-name="-versionName"/>
                    </entity-find>
                    <if condition="dbResourceHistoryList.size() == 0">
                        <return error="true" message="Resource not found"/>
                    </if>

                    <set field="data" from="putDbResource.getText(dbResourceHistoryList.getFirst().versionName)"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="store" noun="GrapeJs" authenticate="anonymous-all">
        <description>Create MJML</description>
        <in-parameters>
            <parameter name="resourceId"/>
            <parameter name="data"/>
            <parameter name="html" allow-html="any"/>
        </in-parameters>
        <out-parameters>
            <parameter name="resourceId"/>
        </out-parameters>
        <actions>
            <if condition="resourceId == 'null'"><set field="resourceId" from="null"/></if>
            <set field="data" from="groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parseText(ec.web.secureRequestParameters._requestBodyText).data)"/>

            <if condition="!resourceId">
                <then>
                    <set field="grapesJsResource" from="ec.resource.getLocationReference('dbresource://grapesjs/project')"/>
                    <service-call name="create#moqui.resource.DbResource" in-map="[parentResourceId:grapesJsResource.getDbResourceId(),isFile:'Y']" out-map="dbResource"/>
                    <service-call name="update#moqui.resource.DbResource" in-map="[resourceId:dbResource.resourceId,filename:dbResource.resourceId+'.json']" out-map="dbResource"/>
                    <set field="versionName" value="01"/>
                    <service-call name="create#moqui.resource.DbResourceFile" in-map="[resourceId: dbResource.resourceId,mimeType: 'text/json',versionName: versionName,rootVersionName: versionName,fileData:data]"/>
                    <service-call name="create#moqui.resource.DbResourceFileHistory" in-map="[resourceId: dbResource.resourceId,versionDate: ec.user.nowTimestamp,userId: ec.user.userId,isDiff: 'N']"/>
                    <set field="resourceId" from="dbResource.resourceId"/>

                    <set field="htmlFile" from="grapesJsResource.makeFile(resourceId.toString()+'.html')"/>
                    <script><![CDATA[htmlFile.putText(html)]]></script>
                </then>
                <else>
                    <entity-find-one entity-name="moqui.resource.DbResource" value-field="dbResource" auto-field-map="[resourceId:resourceId]"/>
                    <if condition="!dbResource">
                        <return error="true" message="Resource not found"/>
                    </if>
                    <set field="actualDbResourcePath" from="null"/>
                    <set field="dbResourcePath" from="dbResource.filename"/>
                    <set field="lastDbResource" from="dbResource"/>
                    <script>
                        while (actualDbResourcePath == null) {
                            if (lastDbResource.parentResourceId == null) {
                                dbResourcePath = 'dbresource://'+dbResourcePath
                                actualDbResourcePath = dbResourcePath
                            } else {
                                lastDbResource = ec.entity.fastFindOne("moqui.resource.DbResource", true, false, lastDbResource.parentResourceId)
                                dbResourcePath = lastDbResource.filename+'/'+dbResourcePath
                            }
                        }
                    </script>
                    <set field="putDbResource" from="ec.resource.getLocationReference(actualDbResourcePath)"/>
                    <script>
                        putDbResource.putText(data)
                    </script>

                    <set field="grapesJsResource" from="ec.resource.getLocationReference('dbresource://grapesjs/project')"/>
                    <set field="htmlFile" from="grapesJsResource.findChildFile(resourceId.toString()+'.html') ?: grapesJsResource.makeFile(resourceId.toString()+'.html')"/>
                    <script><![CDATA[htmlFile.putText(html)]]></script>

                </else>
            </if>
        </actions>
    </service>


</services>
