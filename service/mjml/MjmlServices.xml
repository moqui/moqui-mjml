<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="get" noun="GlobalGrapeVarList">
        <out-parameters>
            <parameter name="baseLinkUrl"/>
            <parameter name="currentYear"/>
        </out-parameters>
        <actions>
            <set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : ec.web.getWebappRootUrl(true,true)" />
            <set field="currentYear" from="ec.user.nowTimestamp.format('yyyy')"/>
        </actions>
    </service>

    <service verb="load" noun="GrapeJs">
        <description>Load GrapesJs resource. Can be adapted to entity other than EmailTemplate, but must have data for the grapesLocation and htmlLocation to ensure safety of read and write of resources.</description>
        <in-parameters>
            <parameter name="grapesLocation"/>
            <parameter name="htmlLocation"/>
            <parameter name="emailTemplateId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="grapesLocation"/>
            <parameter name="grapesVersionName"/>
            <parameter name="grapesPublishedVersionName"/>
            <parameter name="htmlLocation"/>
            <parameter name="htmlVersionName"/>
            <parameter name="htmlPublishedVersionName"/>
            <parameter name="data"/>
            <parameter name="emailTemplateId"/>
            <parameter name="moquiVars"/>
        </out-parameters>
        <actions>
            <if condition="grapesLocation == 'null'"><set field="grapesLocation" from="null"/></if>
            <if condition="htmlLocation == 'null'"><set field="htmlLocation" from="null"/></if>
            <entity-find-one entity-name="moqui.basic.email.EmailTemplate" value-field="emailTemplate" auto-field-map="[emailTemplateId:emailTemplateId]"/>
            <if condition="!emailTemplate"><return error="true" message="Resource not found"/></if>
            <set field="grapesLocation" from="emailTemplate?.grapesLocation"/>
            <set field="grapesPublishedVersionName" from="emailTemplate?.grapesPublishedVersionName"/>
            <set field="htmlLocation" from="emailTemplate?.htmlLocation"/>
            <set field="htmlPublishedVersionName" from="emailTemplate?.htmlPublishedVersionName"/>

            <set field="grapesJsResource" from="ec.resource.getLocationReference('dbresource://grapesjs/project')"/>
            <if condition="!grapesLocation &amp;&amp; !htmlLocation">
                <then>
                    <set field="htmlFile" from="grapesJsResource.makeFile(java.util.UUID.randomUUID().toString()+'.html')"/>
                    <set field="grapesFile" from="grapesJsResource.makeFile(java.util.UUID.randomUUID().toString()+'.json')"/>

                    <service-call name="mjml.MjmlServices.get#GlobalGrapeVarList" out-map="context"/>
                    <set field="defaultLocation" value="dbresource://grapesjs/template/default.json"/>
                    <set field="dataRaw" from="ec.resource.getLocationReference(defaultLocation).getText()"/>
                    <if condition="!dataRaw"><log level="error" message="Template not found at ${defaultLocation}. Please load seed data for moqui-mjml."/></if>
                    <set field="htmlLocation" from="grapesJsResource.location + '/' + htmlFile?.dbResourceId + '.html'"/>
                    <set field="grapesLocation" from="grapesJsResource.location + '/' + grapesFile?.dbResourceId + '.json'"/>
                    <script><![CDATA[
                        htmlFile.move(htmlLocation)
                        grapesFile.putText(dataRaw)
                        grapesFile.move(grapesLocation)
                        ]]></script>
                    <set field="htmlVersionName" from="htmlFile?.getCurrentVersion()?.getVersionName() ?: htmlFile?.getRootVersion()?.getVersionName() ?: '01'"/>
                    <set field="grapesVersionName" from="grapesFile?.getCurrentVersion()?.getVersionName() ?: grapesFile?.getRootVersion()?.getVersionName() ?: '01'"/>
                    <service-call name="update#moqui.basic.email.EmailTemplate" in-map="[emailTemplateId:emailTemplateId,grapesLocation:grapesLocation,htmlLocation:htmlLocation]"/>

                    <service-call name="mjml.MjmlServices.get#GlobalGrapeVarList" out-map="globalGrapeVarList"/>
                    <script><![CDATA[
                        context.putAll(globalGrapeVarList)

                        context.varList = globalGrapeVarList*.key.collect { '\\\$\\{'+it+'\\}' }
                        context.replaceVarRegexPattern = context.varList.join('|')
                        if (context.replaceVarRegexPattern) {
                            context.dataPre = context.dataRaw.replaceAll(context.replaceVarRegexPattern) { match ->
                                return "${match}"
                            }
                        }

                        context.allVarsRegexPattern = /\$\{[a-zA-Z_][a-zA-Z0-9_.]*\}/
                        context.errorVarList = context.dataRaw.findAll(context.allVarsRegexPattern).unique().collect { it - '${' - '}' } - globalGrapeVarList*.key
                        context.errorTemplateRegexPattern = errorVarList.collect { '\\\$\\{'+it+'\\}' }.join('|')
                        if (context.errorTemplateRegexPattern) {
                            context.dataPre = context.dataPre.replaceAll(context.errorTemplateRegexPattern) { match ->
                                def cleanMatch = match - '${' - '}'
                                return "\${" + cleanMatch + "!'\$\\{" + cleanMatch + "}'}"
                            }
                        }
                        ]]></script>
<!--                    <log level="warn" message="dataPre is ${dataPre}"/>-->
                    <script><![CDATA[
                        String location = defaultLocation;

                        freemarker.template.Template newTemplate;
                        Reader templateReader = null;

                        try {
                            templateReader = new StringReader(context.dataPre);
                            // Use the getFtlConfiguration method from ec.resource.templateRenderers.ftl
                            newTemplate = new freemarker.template.Template(location, templateReader, ec.resource.templateRenderers.ftl.getFtlConfiguration());
                        } catch (Exception e) {
                            throw new org.moqui.BaseArtifactException("Error while initializing template at " + location, e);
                        } finally {
                            if (templateReader != null) {
                                try { templateReader.close(); }
                                catch (Exception e) { logger.error("Error closing template reader", e); }
                            }
                        }
                        StringWriter sw = new StringWriter()
                        try {
                            newTemplate.createProcessingEnvironment(ec.contextStack, sw).process();
                        } catch (Exception e) { throw new org.moqui.BaseArtifactException("Error rendering template at " + location, e); }
                        context.data = sw.toString();
                        ]]></script>
<!--                    <log level="warn" message="data is ${data}"/>-->
                    <set field="moquiVars" from="globalGrapeVarList"/>
                </then>
                <else-if condition="grapesLocation &amp;&amp; htmlLocation">
                    <set field="grapesFile" from="ec.resource.getLocationReference(grapesLocation)"/>
                    <!-- TODO: Is this a strong enough check to prevent unauthorized access? -->
                    <if condition="!grapesFile || grapesFile.parent?.location != grapesJsResource.location">
                        <return error="true" message="Resource not found"/>
                    </if>
                    <set field="grapesVersionName" from="grapesFile?.getCurrentVersion()?.getVersionName() ?: grapesFile?.getRootVersion()?.getVersionName() ?: '01'"/>
                    <set field="tempHtmlFile" from="ec.resource.getLocationReference(htmlLocation)"/>
                    <set field="htmlVersionName" from="tempHtmlFile?.getCurrentVersion()?.getVersionName() ?: tempHtmlFile?.getRootVersion()?.getVersionName() ?: '01'"/>
                    <set field="tempHtmlFile" from="null"/>

                    <service-call name="mjml.MjmlServices.get#GlobalGrapeVarList" out-map="globalGrapeVarList"/>
                    <set field="dataRaw" from="grapesFile.getText()"/>
                    <script><![CDATA[
                        context.putAll(globalGrapeVarList)

                        context.varList = globalGrapeVarList*.key.collect { '\\\$\\{'+it+'\\}' }
                        context.replaceVarRegexPattern = context.varList.join('|')
                        if (context.replaceVarRegexPattern) {
                            context.dataPre = context.dataRaw.replaceAll(context.replaceVarRegexPattern) { match ->
                                return "${match}"
                            }
                        }

                        context.allVarsRegexPattern = /\$\{[a-zA-Z_][a-zA-Z0-9_.]*\}/
                        context.errorVarList = context.dataRaw.findAll(context.allVarsRegexPattern).unique().collect { it - '${' - '}' } - globalGrapeVarList*.key
                        context.errorTemplateRegexPattern = errorVarList.collect { '\\\$\\{'+it+'\\}' }.join('|')
                        if (context.errorTemplateRegexPattern) {
                            context.dataPre = context.dataPre.replaceAll(context.errorTemplateRegexPattern) { match ->
                                def cleanMatch = match - '${' - '}'
                                return "\${" + cleanMatch + "!'\$\\{" + cleanMatch + "}'}"
                            }
                        }
                        ]]></script>
<!--                    <log level="warn" message="dataPre is ${dataPre}"/>-->
                    <script><![CDATA[
                        String location = grapesFile.location;

                        freemarker.template.Template newTemplate;
                        Reader templateReader = null;

                        try {
                            templateReader = new StringReader(context.dataPre);
                            // Use the getFtlConfiguration method from ec.resource.templateRenderers.ftl
                            newTemplate = new freemarker.template.Template(location, templateReader, ec.resource.templateRenderers.ftl.getFtlConfiguration());
                        } catch (Exception e) {
                            throw new org.moqui.BaseArtifactException("Error while initializing template at " + location, e);
                        } finally {
                            if (templateReader != null) {
                                try { templateReader.close(); }
                                catch (Exception e) { logger.error("Error closing template reader", e); }
                            }
                        }
                        StringWriter sw = new StringWriter()
                        try {
                            newTemplate.createProcessingEnvironment(ec.contextStack, sw).process();
                        } catch (Exception e) { throw new org.moqui.BaseArtifactException("Error rendering template at " + location, e); }
                        context.data = sw.toString();
                        ]]></script>
<!--                    <log level="warn" message="data is ${data}"/>-->
                    <set field="moquiVars" from="globalGrapeVarList"/>
                </else-if>
                <else>
                    <return error="true" message="Resource not found"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="store" noun="GrapeJs" authenticate="anonymous-all">
        <description>Store GrapesJs resource. Can be adapted to entity other than EmailTemplate, but must have data for the grapesLocation and htmlLocation to ensure safety of read and write of resources.</description>
        <in-parameters>
            <parameter name="emailTemplateId" required="true"/>

            <parameter name="htmlLocation"/>
            <parameter name="grapesLocation"/>
            <parameter name="data" required="true"/>
            <parameter name="moquiVars" required="true"/>
            <parameter name="html" allow-html="any" required="true"/>
            <parameter name="publish" default="false" type="Boolean" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="htmlLocation"/>
            <parameter name="htmlVersionName"/>
            <parameter name="htmlPublishedVersionName"/>
            <parameter name="grapesLocation"/>
            <parameter name="grapesVersionName"/>
            <parameter name="grapesPublishedVersionName"/>
        </out-parameters>
        <actions>
            <if condition="htmlLocation == 'null'"><set field="htmlLocation" from="null"/></if>
            <if condition="grapesLocation == 'null'"><set field="grapesLocation" from="null"/></if>
            <entity-find-one entity-name="moqui.basic.email.EmailTemplate" value-field="emailTemplate" auto-field-map="[emailTemplateId:emailTemplateId]"/>
            <if condition="!emailTemplate"><return error="true" message="Resource not found"/></if>
            <set field="grapesLocation" from="emailTemplate?.grapesLocation"/>
            <set field="grapesPublishedVersionName" from="emailTemplate?.grapesPublishedVersionName"/>
            <set field="htmlLocation" from="emailTemplate?.htmlLocation"/>
            <set field="htmlPublishedVersionName" from="emailTemplate?.htmlPublishedVersionName"/>
            <set field="dataMap" from="new groovy.json.JsonSlurper().parseText(ec.web.secureRequestParameters._requestBodyText).data"/>
<!--            <log level="warn" message="dataMap is ${dataMap}"/>-->
            <set field="moquiVars" from="new groovy.json.JsonSlurper().parseText(ec.web.secureRequestParameters._requestBodyText).moquiVars"/>
            <set field="data" from="groovy.json.JsonOutput.toJson(dataMap)"/>

            <set field="grapesJsResource" from="ec.resource.getLocationReference('dbresource://grapesjs/project')"/>
            <if condition="!htmlLocation &amp;&amp; !grapesLocation">
                <then>
<!--                TODO: This should work as of 2024 May 14, but isn't used anywhere and is untested. There will need to be work done based on the dataMap code
                    <set field="htmlFile" from="grapesJsResource.makeFile(java.util.UUID.randomUUID().toString()+'.html')"/>
                    <set field="grapesFile" from="grapesJsResource.makeFile(java.util.UUID.randomUUID().toString()+'.json')"/>

                    <set field="htmlLocation" from="grapesJsResource.location + '/' + htmlFile?.dbResourceId + '.html'"/>
                    <set field="grapesLocation" from="grapesJsResource.location + '/' + grapesFile?.dbResourceId + '.json'"/>
                    <if condition="ec.resource.getLocationReference(htmlLocation).parent?.location != grapesJsResource.location">
                        <return error="true" message="Resource not found"/>
                    </if>
                    <if condition="ec.resource.getLocationReference(grapesLocation).parent?.location != grapesJsResource.location">
                        <return error="true" message="Resource not found"/>
                    </if>
                    <script><![CDATA[
                        htmlFile.putText(html)
                        htmlFile.move(htmlLocation)
                        grapesFile.putText(data)
                        grapesFile.move(grapesLocation)
                        ]]></script>-->
                    <return error="true" message="Resource not found"/>
                </then>
                <else-if condition="grapesLocation">
                    <set field="grapesFile" from="ec.resource.getLocationReference(grapesLocation)"/>
                    <if condition="!grapesFile || grapesFile.parent?.location != grapesJsResource.location">
                        <return error="true" message="Resource not found"/>
                    </if>
                    <script><![CDATA[
                        context.replaceMoquiVarRegexPattern = context.moquiVars*.value.join('|')

                        if (context.replaceMoquiVarRegexPattern) {
                            context.dataPre = data.replaceAll(context.replaceMoquiVarRegexPattern) { match ->
                                def output = moquiVars.find { it.value == match }?.key
                                return '${' + output + '}'
                            }
                        }
                    ]]></script>
                    <script>grapesFile.putText(dataPre)</script>
                    <set field="grapesVersionName" from="grapesFile?.getCurrentVersion()?.getVersionName()"/>

                    <set field="htmlFile" from="null"/>
                    <if condition="htmlLocation"><then>
                        <set field="htmlFile" from="ec.resource.getLocationReference(htmlLocation)"/>
                    </then><else>
                        <entity-find entity-name="moqui.basic.email.EmailTemplate" list="emailTemplateList">
                            <econdition field-name="grapesLocation"/>
                            <order-by field-name="-lastUpdatedStamp"/></entity-find>
                        <set field="emailTemplate" from="emailTemplateList.getFirst()"/>
                        <if condition="emailTemplateList.size() == 1 &amp;&amp; emailTemplate.htmlLocation"><then>
                            <set field="htmlFile" from="ec.resource.getLocationReference(emailTemplate.htmlLocation)"/>
                        </then><else>
                            <set field="htmlFile" from="grapesJsResource.makeFile(java.util.UUID.randomUUID().toString()+'.html')"/>
                            <set field="htmlLocation" from="grapesJsResource.location + '/' + htmlFile?.dbResourceId + '.html'"/>
                            <script><![CDATA[htmlFile.move(htmlLocation)]]></script>

                            <service-call name="update#moqui.basic.email.EmailTemplate" in-map="[emailTemplateId:emailTemplateId,htmlLocation:htmlLocation]"/>
                        </else></if>
                    </else></if>
                    <if condition="!htmlFile || htmlFile.parent?.location != grapesJsResource.location">
                        <return error="true" message="Resource not found"/>
                    </if>
                    <set field="htmlOut" from="null"/>
                    <script><![CDATA[
                        if (context.replaceMoquiVarRegexPattern) {
                            context.htmlOut = html.replaceAll(context.replaceMoquiVarRegexPattern) { match ->
                                def output = moquiVars.find { it.value == match }?.key
                                return '${' + output + '}'
                            }
                        }
                        htmlFile.putText(htmlOut)]]></script>
                    <set field="htmlVersionName" from="htmlFile?.getCurrentVersion()?.getVersionName()"/>
                    <if condition="publish">
                        <service-call name="update#moqui.basic.email.EmailTemplate" in-map="[emailTemplateId:emailTemplateId,
                            htmlPublishedVersionName:htmlVersionName,grapesPublishedVersionName:grapesVersionName]"/>
                        <set field="htmlPublishedVersionName" from="htmlVersionName"/>
                        <set field="grapesPublishedVersionName" from="grapesVersionName"/>
                    </if>
                </else-if>
                <else>
                    <return error="true" message="Resource not found"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="get" noun="AfterMjmlStore">
        <description>Get the data after storing the MJML data</description>
        <in-parameters>
            <parameter name="emailTemplateId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="htmlLocation"/>
            <parameter name="htmlVersionName"/>
            <parameter name="htmlPublishedVersionName"/>
            <parameter name="grapesLocation"/>
            <parameter name="grapesVersionName"/>
            <parameter name="grapesPublishedVersionName"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.email.EmailTemplate" value-field="emailTemplate" auto-field-map="[emailTemplateId:emailTemplateId]"/>
            <if condition="!emailTemplate"><return error="true" message="Resource not found"/></if>
            <set field="grapesLocation" from="emailTemplate?.grapesLocation"/>
            <set field="grapesVersionName" from="ec.resource.getLocationReference(grapesLocation)?.getCurrentVersion()?.getVersionName()"/>
            <set field="grapesPublishedVersionName" from="emailTemplate?.grapesPublishedVersionName"/>
            <set field="htmlLocation" from="emailTemplate?.htmlLocation"/>
            <set field="htmlVersionName" from="ec.resource.getLocationReference(htmlLocation)?.getCurrentVersion()?.getVersionName()"/>
            <set field="htmlPublishedVersionName" from="emailTemplate?.htmlPublishedVersionName"/>
        </actions>
    </service>

    <service verb="remove" noun="ExcessMjmlEmailResourceHistories" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="runDate" default="Timestamp.from(java.time.Instant.now())" required="true" type="Timestamp"/>
        </in-parameters>
        <out-parameters>
            <parameter name="removedHistoryList"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.basic.email.EmailTemplate" list="emailTemplateList">
                <econdition field-name="grapesLocation" operator="is-not-null"/>
                <econdition field-name="htmlLocation" operator="is-not-null"/>
                <select-field field-name="emailTemplateId,grapesLocation,htmlLocation,grapesPublishedVersionName,htmlPublishedVersionName"/>
                <order-by field-name="-lastUpdatedStamp"/>
            </entity-find>
            <set field="resourceList" from="[]"/>
            <iterate list="emailTemplateList" entry="emailTemplate">
                <set field="grapesFile" from="ec.resource.getLocationReference(emailTemplate.grapesLocation)"/>
                <if condition="grapesFile">
                    <script><![CDATA[
                        def versionWhitelist = []
                        if (grapesFile?.getCurrentVersion()?.getVersionName()) versionWhitelist.add(grapesFile.getCurrentVersion().getVersionName())
                        if (emailTemplate?.grapesPublishedVersionName) versionWhitelist.add(emailTemplate.grapesPublishedVersionName)
                        resourceList.add([location:grapesFile.location,resourceId:grapesFile.dbResourceId,versionWhitelist:versionWhitelist.size()>0?versionWhitelist:null])]]></script>
                </if>
                <set field="htmlFile" from="ec.resource.getLocationReference(emailTemplate.htmlLocation)"/>
                <if condition="htmlFile">
                    <script><![CDATA[
                        def versionWhitelist = []
                        if (htmlFile?.getCurrentVersion()?.getVersionName()) versionWhitelist.add(htmlFile.getCurrentVersion().getVersionName())
                        if (emailTemplate?.htmlPublishedVersionName) versionWhitelist.add(emailTemplate.htmlPublishedVersionName)
                        resourceList.add([location:htmlFile.location,resourceId:htmlFile.dbResourceId,versionWhitelist:versionWhitelist.size()>0?versionWhitelist:null])]]></script>
                </if>
            </iterate>

            <set field="oneHourAgo" from="Timestamp.from(runDate.toInstant().minus(1, java.time.temporal.ChronoUnit.HOURS))"/>
            <set field="removedHistoryList" from="[]"/>

            <iterate list="resourceList" entry="resource">
                <entity-find entity-name="moqui.resource.DbResourceFileHistory" list="resourceHistoryPreList">
                    <econdition field-name="resourceId" from="resource.resourceId"/>
                    <econdition field-name="versionDate" operator="greater" from="oneHourAgo"/>
                    <econdition field-name="versionDate" operator="less-equals" from="runDate"/>
                    <select-field field-name="resourceId,versionName,versionDate,previousVersionName,userId"/>
                    <order-by field-name="-versionDate"/>
                </entity-find>
                <set field="skippedUserIds" from="[]"/>
                <set field="resourceHistoryList" from="[]"/>
                <iterate list="resourceHistoryPreList" entry="resourceHistory">
                    <!-- Add all but the single latest history per userId to resourceHistoryList -->
                    <if condition="resource.versionWhitelist.contains(resourceHistory.versionName) || !skippedUserIds.contains(resourceHistory.userId)">
<!--                        <log level="warn" message="${resource.resourceId} ${resourceHistory.versionName} userId ${resourceHistory.userId}"/>-->
                        <set field="skippedUserIds" from="skippedUserIds + [resourceHistory.userId]"/><continue/></if>
                    <set field="resourceHistoryList" from="resourceHistoryList + [resourceHistory]"/>
                </iterate>
                <iterate list="resourceHistoryList" entry="resourceHistory">
                    <entity-find-one entity-name="moqui.resource.DbResourceFileHistory" value-field="usedResourceHistory" auto-field-map="[resourceId:resource.resourceId,previousVersionName:resourceHistory.versionName]" for-update="true">
                        <select-field field-name="resourceId,versionName,versionDate,previousVersionName,userId"/></entity-find-one>
<!--                    <log level="warn" message="set versionName ${usedResourceHistory.versionName} of previousVersionName ${usedResourceHistory.previousVersionName} to ${resourceHistory.previousVersionName}"/>-->
                    <if condition="usedResourceHistory">
                        <set field="usedResourceHistory.previousVersionName" from="resourceHistory?.previousVersionName"/>

                        <log level="info" message="Removed resource history ${resourceHistory.resourceId} version ${resourceHistory.versionName}"/>
                        <set field="removedHistoryList" from="removedHistoryList + [resourceId:resource.resourceId, versionName:resourceHistory.versionName,versionDate:resourceHistory.versionDate,userId:resourceHistory.userId]"/>

                        <entity-update value-field="usedResourceHistory"/>
                        <entity-delete value-field="resourceHistory"/>
                    </if>
                </iterate>
            </iterate>

        </actions>
    </service>

    <service verb="flush" noun="EmailOnSave" authenticate="anonymous-all">
        <description>Given a html and grapes location, save them to a configurable resource uri on the MjmlFlushEmailToOnSave seca.

Could have a generic implementation that uses a hierarchical conditional structure of basic config like an EntitySyncConfig on DbResource GRAPESJS_PROJECT to component://moqui-mjml/dbresource/grapesjs/project</description>
        <in-parameters>
            <parameter name="emailTemplateId" required="true"/>
            <parameter name="publish" type="Boolean"/>
        </in-parameters>
        <out-parameters>
            <parameter name="outHtmlLocation"/>
            <parameter name="outGrapesLocation"/>

            <parameter name="htmlLocation"/>
            <parameter name="grapesLocation"/>
            <parameter name="productStoreId"/>
            <parameter name="saveOnlyOnPublish" type="Boolean"/>
        </out-parameters>
        <actions>
            <if condition="publish == null"><set field="publish" from="false"/></if>
            <entity-find entity-name="mantle.product.store.ProductStoreEmailDetail" list="storeEmails">
                <econdition field-name="emailTemplateId"/>
            </entity-find>
            <if condition="storeEmails.size() == 0"><return type="danger" message="No store emails found for emailTemplateId ${emailTemplateId}"/></if>
            <set field="storeEmail" from="storeEmails.getFirst()"/>
            <set field="htmlLocation" from="storeEmail.htmlLocation"/>
            <set field="grapesLocation" from="storeEmail.grapesLocation"/>
            <set field="productStoreId" from="storeEmail.productStoreId"/>
            <if condition="!productStoreId"><return message="Defaulting to not saving email, because no productStoreId found for emailTemplateId ${emailTemplateId}"/></if>

            <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="locationStoreSettingList">
                <econdition field-name="productStoreId"/>
                <econdition field-name="settingTypeEnumId" value="PsstMjmlSaveLocation"/>
                <econdition field-name="settingValue" operator="is-not-null"/>
                <econdition field-name="settingValue" operator="not-equals" value=""/>
                <date-filter/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <if condition="locationStoreSettingList.size() == 0"><return message="No location setting found for productStoreId ${productStoreId} for emailTemplateId ${emailTemplateId}"/></if>
            <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="publishStoreSettingList">
                <econdition field-name="productStoreId"/>
                <econdition field-name="settingTypeEnumId" value="PsstMjmlSaveOnPublish"/>
                <econdition field-name="settingValue" operator="is-not-null"/>
                <econdition field-name="settingValue" operator="not-equals" value=""/>
                <date-filter/>
                <order-by field-name="-fromDate"/>
            </entity-find>
            <!-- default to only saving on publish -->
            <set field="saveOnlyOnPublish" from="publishStoreSettingList.getFirst()?.settingValue == 'false' ? false : true"/>
            <!-- conditions
            saveOnlyOnPublish, publish, save
            true, true, -> true
            true, false, -> false
            false, true, -> true
            false, false, -> true -->
            <if condition="saveOnlyOnPublish &amp;&amp; !publish"><return type="warning" message="Not saving email on save because saveOnlyOnPublish is true and publish is false"/></if>

            <set field="toSaveLocation" from="ec.resource.getLocationReference(locationStoreSettingList.getFirst().settingValue)"/>
            <if condition="!toSaveLocation"><return message="No location found for settingValue ${locationStoreSettingList.getFirst().settingValue}"/></if>

            <set field="htmlFile" from="ec.resource.getLocationReference(htmlLocation)"/>
            <set field="htmlText" from="htmlFile?.getText()"/>
            <set field="grapesFile" from="ec.resource.getLocationReference(grapesLocation)"/>
            <set field="grapesText" from="grapesFile?.getText()"/>

            <set field="outHtmlLocation" value=""/>
            <if condition="htmlText &amp;&amp; htmlText">
                <then>
                    <set field="outHtmlFile" from="toSaveLocation.getChild(htmlFile.getFileName())"/>
                    <if condition="!outHtmlFile">
                        <set field="outHtmlFile" from="toSaveLocation.makeFile(htmlFile.getFileName())"/>
                    </if>
                    <set field="outHtmlLocation" from="outHtmlFile.location"/>
                    <log message="Saving html to ${outHtmlFile.location}"/>
                    <script><![CDATA[outHtmlFile.putText(htmlText)]]></script>
                </then>
                <else><log level="warn" message="No html file text found at ${htmlLocation}"/></else>
            </if>
            <set field="outGrapesLocation" value=""/>
            <if condition="grapesText &amp;&amp; grapesFile">
                <then>
                    <set field="outGrapesFile" from="toSaveLocation.getChild(grapesFile.getFileName())"/>
                    <if condition="!outGrapesFile">
                        <set field="outGrapesFile" from="toSaveLocation.makeFile(grapesFile.getFileName())"/>
                    </if>
                    <set field="outGrapesLocation" from="outGrapesFile.location"/>
                    <log message="Saving grapes to ${outGrapesFile.location}"/>
                    <script><![CDATA[outGrapesFile.putText(grapesText)]]></script>
                </then>
                <else><log level="warn" message="No grapes file text found at ${grapesLocation}"/></else></if>
            <if condition="!htmlFile || !grapesFile"><return/></if>
        </actions>
    </service>
</services>
